{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nimport time\nimport math\nimport random\n# controller\ncontroller_1 = Controller(PRIMARY)\n# motors\ndt_left_1 = Motor(Ports.PORT11, GearSetting.RATIO_6_1, True)\ndt_left_2 = Motor(Ports.PORT12, GearSetting.RATIO_6_1, True)\ndt_left_3 = Motor(Ports.PORT13, GearSetting.RATIO_6_1, True)\ndt_right_1 = Motor(Ports.PORT20, GearSetting.RATIO_6_1, False)\ndt_right_2 = Motor(Ports.PORT19, GearSetting.RATIO_6_1, False)\ndt_right_3 = Motor(Ports.PORT18, GearSetting.RATIO_6_1, False)\n# drivetrain\ndt_left = MotorGroup(\n    dt_left_1,\n    dt_left_2,\n    dt_left_3\n)\ndt_right = MotorGroup(\n    dt_right_1,\n    dt_right_2,\n    dt_right_3\n)\ndt_left.set_stopping(BRAKE) \ndt_right.set_stopping(BRAKE)\n# data printing fn\ndef data(m, logs):\n    full = [\n        str(m.velocity(PERCENT))+\"/\"+str(m.velocity(RPM)),\n        m.temperature(PERCENT),\n        m.efficiency(PERCENT),\n        #m.rotation(),\n        m.current(),\n        m.power(),\n        m.torque(),\n        m.is_spinning(),\n        m.is_done(),\n    ]\n    buff = \"\"\n    for i in range(len(full)):\n        if logs[i] == \"1\":\n            buff += str(full[i]) + \"\\t\\t\\t\\t\"\n    return buff\n# spin!\ndt_left.spin(FORWARD, 10, VOLT)\ndt_right.spin(FORWARD, 10, VOLT)\n# main loop\ndef logger():\n    full_desc = [\"velocity%\", \"temp C\", \"efficiency%\", \"current\", \"power\", \"torque\", \"is spinning\", \"is done\"]\n    log_state = \"11100000\" # 1 if you want to show it, 0 otherwise\n    buff_desc = \"\"\n    for i in range(len(full_desc)):\n            if log_state[i] == \"1\":\n                buff_desc += full_desc[i] + \" \"\n    print(buff_desc + \"\\n\" + '-'*20 + \"\\n\\n\")\n    while True:\n        wait(10, MSEC)\n        all_motors = {\n            'l1': dt_left_1,\n            'l2': dt_left_2,\n            'l3': dt_left_3,\n            'r1': dt_right_1,\n            'r2': dt_right_2,\n            'r3': dt_right_3\n        }\n        for k, v in all_motors.items():\n            print(k, data(v, log_state))\n        print('\\n\\n\\n')\nlogger()","textLanguage":"python","rconfig":[],"slot":5,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}